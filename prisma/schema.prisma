// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  email      String   @unique
  hash       String
  type       UserType @default(OWNER)
  created_at DateTime @default(now())
  last_login DateTime @default(now())
  TOTP       TOTP[]
}

model User {
  id                  String   @id @unique @default(uuid())
  first_name          String
  last_name           String
  email               String   @unique
  is_profile_complete Boolean  @default(false)
  type                UserType @default(EMPLOYEE)
  company_id          String?  
  created_at          DateTime @default(now())
  is_active           Boolean  @default(true)
  default_language    String   @default("en")
  Sale                Sale[]
  company             Company? @relation("UserToCompany", fields: [company_id], references: [id])
  ownedCompany        Company? @relation("OwnerToCompany")
}

model Company {
  id                  String    @id @unique @default(uuid())
  name                String
  type                String    @default("company")
  is_profile_complete Boolean   @default(false)
  created_at          DateTime  @default(now())
  currency            String
  owner_id            String?   @unique
  owner               User?     @relation("OwnerToCompany", fields: [owner_id], references: [id])
  employees           User[]    @relation("UserToCompany")
  Client              Client[]
  Product             Product[]
  Sale                Sale[]
}

enum UserType {
  OWNER
  EMPLOYEE
}

model TOTP {
  id         String   @id @unique @default(uuid())
  token      String
  created_at DateTime @default(now())
  user_id    String
  verified   Boolean  @default(false)
  expired    Boolean  @default(false)
  user       Auth     @relation(fields: [user_id], references: [email], onDelete: Cascade)
}

model Client {
  id           String   @id @unique @default(uuid())
  store_name   String
  phone_number String
  address      String
  lat          String
  long         String
  created_at   DateTime @default(now())
  company_id   String
  company      Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Sale         Sale[]
}

model Product {
  id         String     @id @unique @default(uuid())
  name       String
  price      Float
  in_stock   Boolean    @default(true)
  created_at DateTime   @default(now())
  company_id String
  company    Company    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  SaleItem   SaleItem[]
}

model Sale {
  id         String     @id @unique @default(uuid())
  created_at DateTime   @default(now())
  company_id String
  company    Company    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  client_id  String
  client     Client     @relation(fields: [client_id], references: [id], onDelete: Cascade)
  SaleItem   SaleItem[]
  user_id    String?
  user       User?      @relation(fields: [user_id], references: [id])
  total      Float
}

model SaleItem {
  id           String   @id @unique @default(uuid())
  created_at   DateTime @default(now())
  quantity     Int
  price        Float
  product_name String
  product_id   String
  sale_id      String?
  sale         Sale?    @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  Product      Product? @relation(fields: [product_id], references: [id])
}
