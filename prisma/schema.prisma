// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextIndex", "fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Auth {
  email      String   @unique
  hash       String
  type       String   @default("admin")
  created_at DateTime @default(now())
  last_login DateTime @default(now())
  TOTP       TOTP[]
}

model Admin {
  id                  String   @id @unique @default(uuid())
  email               String   @unique
  type                String   @default("admin")
  first_name          String
  last_name           String
  is_profile_complete Boolean  @default(false)
  created_at          DateTime @default(now())
  default_language    String   @default("en")
  company             Company?
}

model Company {
  id                  String     @id @unique @default(uuid())
  name                String
  type                String     @default("company")
  is_profile_complete Boolean    @default(false)
  created_at          DateTime   @default(now())
  currency            String
  owner_id            String     @unique
  owner               Admin      @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  employees           Employee[]
  Client              Client[]
  Product             Product[]
  Sale                Sale[]
}

model Employee {
  id                  String   @id @unique @default(uuid())
  first_name          String
  last_name           String
  email               String   @unique
  is_profile_complete Boolean  @default(false)
  created_at          DateTime @default(now())
  type                String   @default("employee")
  company_id          String
  is_active           Boolean  @default(true)
  company             Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Sale                Sale[]
}

model TOTP {
  id         String   @id @unique @default(uuid())
  token      String
  created_at DateTime @default(now())
  user_id    String
  verified   Boolean  @default(false)
  expired    Boolean  @default(false)
  user       Auth     @relation(fields: [user_id], references: [email], onDelete: Cascade)
}

model Client {
  id           String   @id @unique @default(uuid())
  first_name   String
  last_name    String
  store_name   String?
  phone_number String
  address      String
  lat          String
  long         String
  created_at   DateTime @default(now())
  company_id   String
  company      Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Sale         Sale[]
}

model Product {
  id         String     @id @unique @default(uuid())
  name       String
  price      Float
  in_stock   Boolean    @default(true)
  created_at DateTime   @default(now())
  company_id String
  company    Company    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  SaleItem   SaleItem[]
}

model Sale {
  id         String     @id @unique @default(uuid())
  created_at DateTime   @default(now())
  company_id String
  company    Company    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  client_id  String
  client     Client     @relation(fields: [client_id], references: [id], onDelete: Cascade)
  SaleItem   SaleItem[]
  user_id    String
  user       Employee?  @relation(fields: [user_id], references: [id])
}

model SaleItem {
  id           String   @id @unique @default(uuid())
  created_at   DateTime @default(now())
  quantity     Int
  price        Float
  product_name String
  product_id   String
  sale_id      String?
  sale         Sale?    @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  Product      Product? @relation(fields: [product_id], references: [id])
}
